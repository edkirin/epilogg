"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 1.8c1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import project.settings_local
local = project.settings_local


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1=$j2b076&#%21!ro@g-^@rf2r4g#a1x1t%ncc5y=h@1y!ecbl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = local.Debug

ALLOWED_HOSTS = local.AllowedHosts

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'rest_framework',
    'rest_framework.authtoken',

    'project.main',
    'project.api',
]

if local.Debug:
    INSTALLED_APPS += (
        'django.contrib.staticfiles',
    )


MIDDLEWARE = [
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'project.main.middleware.pagination.PaginationMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "APP_DIRS": True,
        'DIRS': [
            os.path.join(local.ProjectPath, 'template'),
            os.path.join(local.ProjectPath, 'administrator/template'),
        ],
        "OPTIONS": {
            # "match_extension": ".jinja",
            # "match_regex": "*\.jinja$",  # This is exclusive with "match_extension"
            # "newstyle_gettext": True,
            # "filters": {
            #     "jinja_filters": "project.main.jinja_filters",
            # },
            # "globals": {
            #     "jinja_globals": "project.main.jinja_globals",
            # },
            "environment": "project.jinja2env.environment",
            "extensions": [
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.with_",
                "jinja2.ext.i18n",
                "jinja2.ext.autoescape",
                "django_jinja.builtins.extensions.CsrfExtension",
                "django_jinja.builtins.extensions.CacheExtension",
                "django_jinja.builtins.extensions.TimezoneExtension",
                "django_jinja.builtins.extensions.UrlsExtension",
                "django_jinja.builtins.extensions.StaticFilesExtension",
                "django_jinja.builtins.extensions.DjangoFiltersExtension",
            ],
            "autoescape": True,
            "auto_reload": local.Debug,
            # "translation_engine": "django.utils.translation",
        }
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [os.path.join(local.ProjectPath, 'template')],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


PAGINATION_DEFAULT_PAGINATION = 50


# add conditionally other application template directories
# for t in TEMPLATES:
#     if t["BACKEND"] == "django.template.backends.jinja2.Jinja2":
#         pass
        # if local.ApplicationSimulatorEnabled:
        #     t["DIRS"].append(os.path.join(local.ProjectPath, 'simulator/template'))


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = local.DATABASES

EMAIL_HOST = local.EmailSettings['host']
EMAIL_PORT = local.EmailSettings['port']
EMAIL_HOST_USER = local.EmailSettings['username']
EMAIL_HOST_PASSWORD = local.EmailSettings['password']
EMAIL_USE_TLS = local.EmailSettings['use_tls']
EMAIL_USE_SSL = local.EmailSettings['use_ssl']
EMAIL_TIMEOUT = local.EmailSettings['timeout']
DEFAULT_FROM_EMAIL = local.EmailSettings['default_from_email']
SERVER_EMAIL = local.EmailSettings['server_email']


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

# we don't want settings to call gettext - we only want to extract strings
def gettext(s): s


LANGUAGE_CODE = 'hr'
LANGUAGES = (
    ('hr', gettext('Hrvatski')),
)
SUPPORTED_LANGUAGES = ["hr",]

LANGUAGE_DATA = {
    "hr": {
        "name": "Hrvatski",
        "flag": "/static/img/flag_hr.png",
        "locale_code": "hr_HR",
    },
}


TIME_ZONE = 'Europe/Zagreb'

USE_I18N = False
USE_L10N = False
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
STATIC_SERVE_URL = '/static/'
STATIC_SERVE_ROOT = local.StaticRoot
STATIC_ROOT = local.StaticRoot2
MEDIA_URL = '/data/'
MEDIA_ROOT = local.DataRoot

STATICFILES_DIRS = (
    local.StaticRoot,
)


if local.Debug:
    STATICFILES_DIRS = (
        local.StaticRoot,
    )

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

SESSION_EXPIRE_AT_BROWSER_CLOSE = True


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}


#*************************************************************
# Django Debug Toolbar

if local.DebugToolbar:
    INSTALLED_APPS += (
        'debug_toolbar',
    )

    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

    INTERNAL_IPS = ('127.0.0.1',)

    DEBUG_TOOLBAR_PANELS = (
        #'debug_toolbar.panels.version.VersionDebugPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        #'debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        #'debug_toolbar.panels.template.TemplateDebugPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        #'debug_toolbar.panels.signals.SignalDebugPanel',
        #'debug_toolbar.panels.logger.LoggingPanel',
    )

    DEBUG_TOOLBAR_CONFIG = ({
    })


SiteName = local.SiteName


if local.ChannelsEnabled:
    INSTALLED_APPS += [
        'channels',
    ]

    # Channels
    ASGI_APPLICATION = 'project.routing.application'
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1', 6379)],
            },
        },
    }
